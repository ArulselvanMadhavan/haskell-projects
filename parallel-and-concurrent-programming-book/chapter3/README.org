* Evaluation Strategies
  - Strategy is a function in the Eval monad.
    #+BEGIN_SRC haskell
    type Strategy a = a -> Eval a
    #+END_SRC
  - Idea: Strategy takes a data structure as input, traverses the
    structure creating parallelism with /rpar/ and /rseq/ and then
    returns the original value.
    #+BEGIN_SRC haskell
    parPair :: Strategy (a, b)
    #+END_SRC
    #+BEGIN_SRC haskell
    using :: a -> Strategy a -> a
    x `using` s = runEval (s x)
    #+END_SRC
* Parameterized Strategies
  - /parPair/ Strategy embodies fixed policy.
  - WHNF and NF are two ends in the evaluation hierarchy.
  - Parameterized Strategies
    #+BEGIN_SRC haskell
    evalPair :: Strategy a -> Strategy b -> Strategy (a, b)
    evalPair sa sb (a, b) = do
      a' <- sa a
      b' <- sb b
      return (a', b')
    #+END_SRC
    #+BEGIN_SRC haskell
    rdeepseq :: NFData a => Strategy a
    rdeepseq x = seq (force x)
    #+END_SRC
    #+BEGIN_SRC haskell
    rparWith :: Strategy a -> Strategy a
    #+END_SRC
    #+BEGIN_SRC haskell
    parPair :: Strategy a -> Strategy b -> Strategy (a, b)
    parPair sa sb = evalPair (rparWith sa) (rparWith sb)
    #+END_SRC
    #+BEGIN_SRC haskell
    r0 :: Strategy a
    r0 x = return x
    #+END_SRC
* Strategy for evaluating a List in Parallel
  - /parMap/
    - map
    - Evaluating the elements of a list in parallel.
      #+BEGIN_SRC haskell
      parMap :: (a -> b) -> [a] -> [b]
      parMap f xs = map f xs `using` parList rseq
      #+END_SRC
      #+BEGIN_SRC haskell
      evalList :: Strategy a -> Strategy [a]
      evalList strat [] = return []
      evalList strat (x:xs) = do
        x' <- strat x
        xs' <- evalList strat xs
        return (x' : xs')
      #+END_SRC
      #+BEGIN_SRC haskell
      parList :: Strategy a -> Strategy [a]
      parList strat = evalList (rparWith strat)
      #+END_SRC
* KMeans
  - Coordinates
    #+BEGIN_SRC haskell
    data Point = Point {-#UNPACK#-} !Double {-#UNPACK#-}!Double
    #+END_SRC
    - /BangPattern/ - strict evaluation
    - /UNPACK/ Pragma - No Boxed types
  - Cluster
    #+BEGIN_SRC haskell
      data Cluster = 
        Cluster { clId :: {-#UNPACK#-} !Int         -- Cluster Id
                , clCent :: {-#UNPACK#-} !Point     -- Center
                }
    #+END_SRC
  - PointSum
    #+BEGIN_SRC haskell
      data PointSum = PointSum !Int !Double !Double
    #+END_SRC
    #+BEGIN_SRC haskell
      addToPointSum :: PointSum -> Point -> PointSum
      addToPointSum (PointSum count xs ys) (Point x y) =
        PointSum (count + 1) (xs + x) (ys + y)
    #+END_SRC
    #+BEGIN_SRC haskell
      pointSumToCluster :: Int -> PointSum -> Cluster
      pointSumToCluster i (PointSum count xs ys) = 
        Cluster { clId = i
        , clCent = Point (xs / fromIntegral count) (ys / fromIntegral count)
        }        
    #+END_SRC
    
