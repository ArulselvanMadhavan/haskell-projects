* Working with Types
** Type Scoping
   - Haskell uses a generalization of the Hindley-Milner type system.
** Type Applications
** Ambiguous Types and Non-Injectivity
   #+BEGIN_SRC haskell
   typeRep :: Typeable a => Proxy a -> TypeRep
   #+END_SRC
   - Data.Typeable provides a mechanism for getting information about
     types at runtime.
   - Ambiguous type variables are ones that don't occur to the right
     of the fat arrow(=>).
   - Haskell never correctly infer the type of these variables.
   - Ambiguous type variable example
     #+BEGIN_SRC haskell
     typeName :: forall a. Typeable a => String
     typeName = show . typeRep $ Proxy @a
     #+END_SRC
   - Ambiguous types are very useful for type-level programming.
** Non-Injectivity
   - Types that don't have an inverse.
   - Examples:
     #+BEGIN_SRC haskell
type family AlwaysUnit a where
  AlwaysUnit a = ()

    -- Example1
ex1 :: AlwaysUnit a -> a
ex1 _ = undefined

        -- Ex 2
ex2 :: b -> AlwaysUnit a -> b
ex2 b _ = b

          -- Ex 3
ex3 :: forall a. (Typeable a, Show a) => AlwaysUnit a -> String
ex3 _ = typeName @a     
     #+END_SRC
   - GHC allows us to deal with non injective functions by
     - Proxy a

     - A combination of XTypeApplication at call site and
       XAllowAmbiguousTypes at definition site.
