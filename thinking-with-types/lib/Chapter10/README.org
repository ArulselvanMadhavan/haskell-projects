* First Class Families
  - Type families were thought of as something that couldn't be first class.
    - Since they can't be partially applied.
  - Li-yao Xia has relaxed this limitation by giving us tools to work
    around the limitations of not having first class type families.
    - /Defunctionalization/ - Process of replacing an instantiation of
      a polymorphic function with a specialized label instead.
  - Kind Synonym - ~Exp a~
    #+BEGIN_SRC haskell
    type Exp a = a -> Type
    #+END_SRC
  - FCFs - A defunctionalized symbol whose type corresponds to the
    desired type-level function.
** FCFs form monad at the type-level
   - (<=<) at the type-level acts like regular function composition (.)
   - (=<<) behaves like function application ($)
   - /first-class-families/ package provides most of Prelude as FCFs
   - There is no type-level /Eq/ at the type-level.
     #+BEGIN_SRC haskell
     data TyEq :: a -> b -> Exp Bool
     #+END_SRC
