* Terms, Types and Kinds
** Kind system
   - /Terms/ and /Types/ are the fundamental building blocks.
   - /Terms/ are values. Exist at runtime.
   - /Types/ are sanity checks.
   - Fundamental building blocks for type level programming are
     /types/ and /kinds/
   - /Kinds/ can be loosely described as "types of types".
** Kind of "Types"
   - /TYPE/ is the kind of types. Historically, written as *.
   - Types that have kind as TYPE are value types.
** Constraint Kinds
   - /Constraint/ is the kind of any fully saturated typeclass.
** Data Kinds
   - /XDataKinds/ - gives us access to kinds other than TYPE,
     CONSTRAINT and their arrow derivatives.
     #+BEGIN_SRC haskell
      data Bool
        = True
        | False
        deriving (Eq, Show)

      {-
      kind Bool
        = 'True   -- Promoted Data Constructor
        | 'False  -- Promoted Data Constructor
      -}     
     #+END_SRC
   - Promoted Data Constructors exist in the same namespace as type
     constructors.
** Promoted Data constructors as Phantom parameters
   #+BEGIN_SRC haskell
    data UserType = NormalUser | Admin

    data User = User
      { userAdminToken :: Maybe (Proxy 'Admin)
      }

    doSensitiveThings :: Proxy 'Admin -> IO ()
    doSensitiveThings _ =
      putStrLn "Doing sensitive things"   
   #+END_SRC
** Promotion of Built-In Types
   - /GHC.TypeLits/ defines the kinds themselves, as well as all of
     the useful type families for manipulating them.
*** Promotion of List type
    #+BEGIN_SRC haskell
    data [a]
      = []
      | a : [a]
    #+END_SRC
    - '[] promoted data constructor of kind [A]
    - '(:) promoted data constructor of kind A -> [A]
*** Promotion of tuples
    - '(,) is promoted data constructor.
** Type-Level Functions
   - Roughly, Closed Type families are functions at the type-level.
   - Examples: Div, CmpSymbol
     #+BEGIN_SRC haskell
      {-# LANGUAGE DataKinds      #-}
      {-# LANGUAGE KindSignatures #-}
      {-# LANGUAGE TypeFamilies   #-}
      module TypelevelFamily where

        -- Term level function
      or :: Prelude.Bool -> Prelude.Bool -> Prelude.Bool
      or Prelude.True _  = Prelude.True
      or Prelude.False y = y

      type family Or (x :: Prelude.Bool) (y :: Prelude.Bool) :: Prelude.Bool where
        Or 'True y = 'True
        Or 'False y = y     
     #+END_SRC
*** Type Families vs Functions
    - Type families can't be curried.
    - All parameters must be specified simultaneously.
*** Interesting Signatures
    #+BEGIN_SRC haskell
    type family Foo (x::Bool) (y::Bool) :: Bool
    type family Bar x y :: Bool -> Bool -> Bool    
    #+END_SRC
    #+BEGIN_SRC haskell
    > :k Foo
    Foo :: Bool -> Bool -> Bool
    > :k Bar
    Bar :: * -> * -> Bool -> Bool -> Bool    
    #+END_SRC
